plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
    junitPlatformVersion = '1.8.2'
    junitConsoleVersion = '1.8.2'
    ownerVersion = '1.0.12'
    jacksonVersion = '2.13.2'
    lombokVersion = '1.18.24'
    slf4jVersion = '1.7.36'
    restAssuredVersion = '4.5.1'
    assertjVersion = '3.22.0'
    graphqlCodegenVersion = '5.4.0'
    commonsIoVersion = '2.11.0'
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-api
    testImplementation "org.junit.platform:junit-platform-suite-api:$junitPlatformVersion"
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-runner
    testImplementation "org.junit.platform:junit-platform-runner:$junitPlatformVersion"
    testImplementation ("org.junit.platform:junit-platform-console-standalone:$junitConsoleVersion") {
        because("we want to be able to run our junit5 test through the command line")
    }

    // https://mvnrepository.com/artifact/org.aeonbits.owner/owner
    testImplementation("org.aeonbits.owner:owner:$ownerVersion") {
        because("we want a reduction in boilerplate code related to reading/using values from .properties files in Java")
    }

    // logging facade
    // https://mvnrepository.com/artifact/org.slf4j
    testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"

    // jackson - yaml (de)serialization
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    testImplementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion"
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    testImplementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    // lombok - boilerplate-reducing annotations
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    testImplementation "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // https://mvnrepository.com/artifact/io.rest-assured/rest-assured
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"

    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation("org.assertj:assertj-core:$assertjVersion") {
        because("we want to be able to write custom assertions")
    }

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation("commons-io:commons-io:$commonsIoVersion") {
        because("we want to read the contents of a file into a String")
    }

    // https://mvnrepository.com/artifact/io.github.kobylynskyi/graphql-java-codegen
    implementation "io.github.kobylynskyi:graphql-java-codegen:$graphqlCodegenVersion"
}

test {
    useJUnitPlatform()
}

// shared config for custom gradle tasks of type "test"
tasks.withType(Test) {
    useJUnitPlatform() {
        includeTags(project.hasProperty('tags') ? project.getProperty('tags') : "none() | any()")
    }
    testLogging {
        events("passed", "skipped", "failed")
    }
    testLogging.showStandardStreams = true
    group = "verification"
    systemProperties = [
            "target_env": project.hasProperty('target_env') ? project.getProperty('target_env') : 'qa',
            // create testrail report after test run
            "testrail": project.hasProperty('testrail') ? project.getProperty('testrail') : false,
            // override property value defined in junit-platform.properties if provided via cmd
            'junit.jupiter.execution.parallel.enabled': project.hasProperty('parallel') ? project.getProperty('parallel') : false
    ]
}

task wip(type: Test) {
    useJUnitPlatform() {
        includeTags "wip"
    }
}